package actions

import (
	"buddhabowls/models"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (CountPrepItem)
// DB Table: Plural (count_prep_items)
// Resource: Plural (CountPrepItems)
// Path: Plural (/count_prep_items)
// View Template Folder: Plural (/templates/count_prep_items/)

// CountPrepItemsResource is the resource for the CountPrepItem model
type CountPrepItemsResource struct {
	buffalo.Resource
}

// List gets all CountPrepItems. This function is mapped to the path
// GET /count_prep_items
func (v CountPrepItemsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	countPrepItems := &models.CountPrepItems{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params()).Eager()

	// Retrieve all CountPrepItems from the DB
	if err := q.All(countPrepItems); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, countPrepItems))
}

// Show gets the data for one CountPrepItem. This function is mapped to
// the path GET /count_prep_items/{count_prep_item_id}
func (v CountPrepItemsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty CountPrepItem
	countPrepItem := &models.CountPrepItem{}

	// To find the CountPrepItem the parameter count_prep_item_id is used.
	if err := tx.Find(countPrepItem, c.Param("count_prep_item_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, countPrepItem))
}

// New renders the form for creating a new CountPrepItem.
// This function is mapped to the path GET /count_prep_items/new
func (v CountPrepItemsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.CountPrepItem{}))
}

// Create adds a CountPrepItem to the DB. This function is mapped to the
// path POST /count_prep_items
func (v CountPrepItemsResource) Create(c buffalo.Context) error {
	// Allocate an empty CountPrepItem
	countPrepItem := &models.CountPrepItem{}

	// Bind countPrepItem to the html form elements
	if err := c.Bind(countPrepItem); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(countPrepItem)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, countPrepItem))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "CountPrepItem was created successfully")

	// and redirect to the count_prep_items index page
	return c.Render(201, r.Auto(c, countPrepItem))
}

// Edit renders a edit form for a CountPrepItem. This function is
// mapped to the path GET /count_prep_items/{count_prep_item_id}/edit
func (v CountPrepItemsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty CountPrepItem
	countPrepItem := &models.CountPrepItem{}

	if err := tx.Find(countPrepItem, c.Param("count_prep_item_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, countPrepItem))
}

// Update changes a CountPrepItem in the DB. This function is mapped to
// the path PUT /count_prep_items/{count_prep_item_id}
func (v CountPrepItemsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty CountPrepItem
	countPrepItem := &models.CountPrepItem{}

	if err := tx.Find(countPrepItem, c.Param("count_prep_item_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind CountPrepItem to the html form elements
	if err := c.Bind(countPrepItem); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(countPrepItem)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, countPrepItem))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "CountPrepItem was updated successfully")

	// and redirect to the count_prep_items index page
	return c.Render(200, r.Auto(c, countPrepItem))
}

// Destroy deletes a CountPrepItem from the DB. This function is mapped
// to the path DELETE /count_prep_items/{count_prep_item_id}
func (v CountPrepItemsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty CountPrepItem
	countPrepItem := &models.CountPrepItem{}

	// To find the CountPrepItem the parameter count_prep_item_id is used.
	if err := tx.Find(countPrepItem, c.Param("count_prep_item_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(countPrepItem); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "CountPrepItem was destroyed successfully")

	// Redirect to the count_prep_items index page
	return c.Render(200, r.Auto(c, countPrepItem))
}
