package actions

import (
	"buddhabowls/componentcontexts"
	"buddhabowls/models"
	"fmt"
	"net/url"
	"strconv"
	"strings"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (PurchaseOrder)
// DB Table: Plural (purchase_orders)
// Resource: Plural (PurchaseOrders)
// Path: Plural (/purchase_orders)
// View Template Folder: Plural (/templates/purchase_orders/)

// PurchaseOrdersResource is the resource for the PurchaseOrder model
type PurchaseOrdersResource struct {
	buffalo.Resource
}

const _poStartTimeKey = "poStartTime"
const _poEndTimeKey = "poEndTime"

// DateChanged updates visible purchase orders table
// GET /purchase_orders/date_changed
func (v PurchaseOrdersResource) DateChanged(c buffalo.Context) error {
	store := c.Session()

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	paramsMap, ok := c.Params().(url.Values)
	if !ok {
		fmt.Println(fmt.Errorf("Could not find params"))
		return c.Error(500, errors.New("Could not parse params"))
	}

	if yearStr, found := paramsMap["Year"]; found {
		year, err := strconv.Atoi(yearStr[0])
		if err != nil {
			return c.Error(500, errors.New("Could not get year from params"))
		}
		startTime := time.Date(year, 0, 0, 0, 0, 0, 0, time.UTC)

		if startTimeStr, ok := paramsMap["StartTime"]; ok {
			startTime, err = time.Parse(time.RFC3339, startTimeStr[0])
			if err != nil {
				fmt.Println(fmt.Errorf("Could not parse start time: %s", startTimeStr[0]))
				return c.Error(500, errors.New("Could not parse start time"))
			}
		}

		periodSelectorContext := componentcontexts.PeriodSelectorContext{}
		periodSelectorContext.Init(startTime)

		// put period selector context in the UI
		c.Set("pSelectorContext", periodSelectorContext)

		startVal := periodSelectorContext.SelectedWeek.StartTime.Format(time.RFC3339)
		endVal := periodSelectorContext.SelectedWeek.EndTime.Format(time.RFC3339)

		// change selected PO dates in session
		store.Set(_poStartTimeKey, startVal)
		store.Set(_poEndTimeKey, endVal)

		purchaseOrders := &models.PurchaseOrders{}
		q := tx.Eager().Where(fmt.Sprintf("order_date >= '%s' AND order_date < '%s'",
			startVal, endVal)).Order("order_date DESC")

		if err := q.All(purchaseOrders); err != nil {
			errors.WithStack(err)
		}

		c.Set("purchaseOrders", *purchaseOrders)

		years := store.Get("years").([]int)
		c.Set("years", years)

		return c.Render(200, r.JavaScript("purchase_orders/replace_table"))
	}

	return c.Error(422, errors.New("No year supplied"))
}

// RowEdited handles updating a model when a datagrid row is modified
// POST /purchase_orders/row_edited/{purchase_order_id}
func (v PurchaseOrdersResource) RowEdited(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PurchaseOrder
	purchaseOrder := &models.PurchaseOrder{}

	if err := tx.Find(purchaseOrder, c.Param("purchase_order_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind PurchaseOrder to the html form elements
	if err := c.Bind(purchaseOrder); err != nil {
		fmt.Println(fmt.Errorf("Could not bind PurchaseOrder"))
		return c.Error(422, err)
	}

	verrs, err := tx.ValidateAndUpdate(purchaseOrder)
	if err != nil {
		fmt.Println(fmt.Errorf("Invalid data"))
		return c.Error(422, err)
	}
	if verrs.HasAny() {
		fmt.Println(fmt.Errorf("Invalid data"))
		errorMsgs := []string{}
		for _, verr := range verrs.Errors {
			for _, v := range verr {
				errorMsgs = append(errorMsgs, v)
			}
		}

		return c.Render(422, r.String(strings.Join(errorMsgs, "\n")))
	}

	return c.Render(200, r.String("success"))
}

// List gets all PurchaseOrders. This function is mapped to the path
// GET /purchase_orders
func (v PurchaseOrdersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	yearResult := make([]int, 5)
	q := tx.RawQuery("SELECT DISTINCT EXTRACT(YEAR FROM order_date) FROM purchase_orders ORDER BY EXTRACT(YEAR FROM order_date) ASC")

	// Retrieve all PurchaseOrders from the DB
	// if err := q.All(purchaseOrders); err != nil {
	if err := q.All(&yearResult); err != nil {
		return errors.WithStack(err)
	}

	store := c.Session()

	years := []int{}
	for _, val := range yearResult {
		if val > 2000 {
			years = append(years, val)
		}
	}
	store.Set("years", years)

	periodSelectorContext := componentcontexts.PeriodSelectorContext{}
	if store.Get(_poStartTimeKey) == nil || store.Get(_poEndTimeKey) == nil {
		periodSelectorContext.Init(time.Now())
		store.Set(_poStartTimeKey, periodSelectorContext.SelectedWeek.StartTime.Format(time.RFC3339))
		store.Set(_poEndTimeKey, periodSelectorContext.SelectedWeek.EndTime.Format(time.RFC3339))
	} else {
		startTime := store.Get(_poStartTimeKey).(string)
		t, err := time.Parse(time.RFC3339, startTime)
		if err != nil {
			return errors.WithStack(err)
		}
		periodSelectorContext.Init(t)
	}

	c.Set("pSelectorContext", periodSelectorContext)
	c.Set("years", years)

	return c.Render(200, r.HTML("purchase_orders/index"))
}

// Show gets the data for one PurchaseOrder. This function is mapped to
// the path GET /purchase_orders/{purchase_order_id}
func (v PurchaseOrdersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PurchaseOrder
	purchaseOrder := &models.PurchaseOrder{}

	// To find the PurchaseOrder the parameter purchase_order_id is used.
	if err := tx.Find(purchaseOrder, c.Param("purchase_order_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, purchaseOrder))
}

// New renders the form for creating a new PurchaseOrder.
// This function is mapped to the path GET /purchase_orders/new
func (v PurchaseOrdersResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.PurchaseOrder{}))
}

// Create adds a PurchaseOrder to the DB. This function is mapped to the
// path POST /purchase_orders
func (v PurchaseOrdersResource) Create(c buffalo.Context) error {
	// Allocate an empty PurchaseOrder
	purchaseOrder := &models.PurchaseOrder{}
	a := c.Request().Form
	fmt.Println(a)
	// Bind purchaseOrder to the html form elements
	if err := c.Bind(purchaseOrder); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(purchaseOrder)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, purchaseOrder))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "PurchaseOrder was created successfully")

	// and redirect to the purchase_orders index page
	return c.Render(201, r.Auto(c, purchaseOrder))
}

// Edit renders a edit form for a PurchaseOrder. This function is
// mapped to the path GET /purchase_orders/{purchase_order_id}/edit
func (v PurchaseOrdersResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PurchaseOrder
	purchaseOrder := &models.PurchaseOrder{}

	if err := tx.Find(purchaseOrder, c.Param("purchase_order_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, purchaseOrder))
}

// Update changes a PurchaseOrder in the DB. This function is mapped to
// the path PUT /purchase_orders/{purchase_order_id}
func (v PurchaseOrdersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PurchaseOrder
	purchaseOrder := &models.PurchaseOrder{}

	if err := tx.Find(purchaseOrder, c.Param("purchase_order_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind PurchaseOrder to the html form elements
	if err := c.Bind(purchaseOrder); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(purchaseOrder)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, purchaseOrder))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "PurchaseOrder was updated successfully")

	// and redirect to the purchase_orders index page
	return c.Render(200, r.Auto(c, purchaseOrder))
}

// Destroy deletes a PurchaseOrder from the DB. This function is mapped
// to the path DELETE /purchase_orders/{purchase_order_id}
func (v PurchaseOrdersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PurchaseOrder
	purchaseOrder := &models.PurchaseOrder{}

	// To find the PurchaseOrder the parameter purchase_order_id is used.
	if err := tx.Find(purchaseOrder, c.Param("purchase_order_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(purchaseOrder); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "PurchaseOrder was destroyed successfully")

	// Redirect to the purchase_orders index page
	return c.Render(200, r.Auto(c, purchaseOrder))
}
