package actions

import (
	"buddhabowls/models"
	"buddhabowls/presentation"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Inventory)
// DB Table: Plural (inventories)
// Resource: Plural (Inventories)
// Path: Plural (/inventories)
// View Template Folder: Plural (/templates/inventories/)

// InventoriesResource is the resource for the Inventory model
type InventoriesResource struct {
	buffalo.Resource
}

// List gets all Inventories. This function is mapped to the path
// GET /inventories
func (v InventoriesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	presenter := presentation.NewPresenter(tx)
	startTime, endTime, err := setPeriodSelector(c, presenter)
	if err != nil {
		return errors.WithStack(err)
	}

	inventories, err := presenter.GetInventories(startTime, endTime)
	if err != nil {
		return errors.WithStack(err)
	}

	if len(*inventories) == 0 {
		latestInv, err := presenter.GetLatestInventory(startTime)
		if err != nil {
			return errors.WithStack(err)
		}

		*inventories = append(*inventories, *latestInv)
	}

	c.Set("inventories", inventories)
	c.Set("defaultItems", (*inventories)[0].Items)

	return c.Render(200, r.HTML("inventories/index"))
}

// Show gets the data for one Inventory. This function is mapped to
// the path GET /inventories/{inventory_id}
func (v InventoriesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Inventory
	inventory := &models.Inventory{}

	// To find the Inventory the parameter inventory_id is used.
	if err := tx.Find(inventory, c.Param("inventory_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, inventory))
}

// New renders the form for creating a new Inventory.
// This function is mapped to the path GET /inventories/new
func (v InventoriesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Inventory{}))
}

// Create adds a Inventory to the DB. This function is mapped to the
// path POST /inventories
func (v InventoriesResource) Create(c buffalo.Context) error {
	// Allocate an empty Inventory
	inventory := &models.Inventory{}

	// Bind inventory to the html form elements
	if err := c.Bind(inventory); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(inventory)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, inventory))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Inventory was created successfully")

	// and redirect to the inventories index page
	return c.Render(201, r.Auto(c, inventory))
}

// Edit renders a edit form for a Inventory. This function is
// mapped to the path GET /inventories/{inventory_id}/edit
func (v InventoriesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Inventory
	inventory := &models.Inventory{}

	if err := tx.Find(inventory, c.Param("inventory_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, inventory))
}

// Update changes a Inventory in the DB. This function is mapped to
// the path PUT /inventories/{inventory_id}
func (v InventoriesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Inventory
	inventory := &models.Inventory{}

	if err := tx.Find(inventory, c.Param("inventory_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Inventory to the html form elements
	if err := c.Bind(inventory); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(inventory)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, inventory))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Inventory was updated successfully")

	// and redirect to the inventories index page
	return c.Render(200, r.Auto(c, inventory))
}

// Destroy deletes a Inventory from the DB. This function is mapped
// to the path DELETE /inventories/{inventory_id}
func (v InventoriesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Inventory
	inventory := &models.Inventory{}

	// To find the Inventory the parameter inventory_id is used.
	if err := tx.Find(inventory, c.Param("inventory_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(inventory); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Inventory was destroyed successfully")

	// Redirect to the inventories index page
	return c.Render(200, r.Auto(c, inventory))
}
