package actions

import (
	"buddhabowls/models"
	"buddhabowls/presentation"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (PrepItem)
// DB Table: Plural (prep_items)
// Resource: Plural (PrepItems)
// Path: Plural (/prep_items)
// View Template Folder: Plural (/templates/prep_items/)

// PrepItemsResource is the resource for the PrepItem model
type PrepItemsResource struct {
	buffalo.Resource
}

// List gets all PrepItems. This function is mapped to the path
// GET /prep_items
func (v PrepItemsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	prepItems := &models.PrepItems{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all PrepItems from the DB
	if err := q.All(prepItems); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, prepItems))
}

// Show gets the data for one PrepItem. This function is mapped to
// the path GET /prep_items/{prep_item_id}
func (v PrepItemsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PrepItem
	prepItem := &models.PrepItem{}

	// To find the PrepItem the parameter prep_item_id is used.
	if err := tx.Find(prepItem, c.Param("prep_item_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, prepItem))
}

// New renders the form for creating a new PrepItem.
// This function is mapped to the path GET /prep_items/new
func (v PrepItemsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.PrepItem{}))
}

// Create adds a PrepItem to the DB. This function is mapped to the
// path POST /prep_items
func (v PrepItemsResource) Create(c buffalo.Context) error {
	// Allocate an empty PrepItem
	prepItem := &models.PrepItem{}

	// Bind prepItem to the html form elements
	if err := c.Bind(prepItem); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(prepItem)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, prepItem))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "PrepItem was created successfully")

	// and redirect to the prep_items index page
	return c.Render(201, r.Auto(c, prepItem))
}

// Edit renders a edit form for a PrepItem. This function is
// mapped to the path GET /prep_items/{prep_item_id}/edit
func (v PrepItemsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	presenter := presentation.NewPresenter(tx)
	prepItem, err := presenter.GetPrepItem(c.Param("prep_item_id"))
	if err != nil {
		return c.Error(404, err)
	}

	recipes, err := presenter.GetBatchRecipes()
	if err != nil {
		return errors.WithStack(err)
	}

	invItems, err := presenter.GetInventoryItems()
	if err != nil {
		return errors.WithStack(err)
	}

	prepItems, err := presenter.GetPrepItems()
	if err != nil {
		return errors.WithStack(err)
	}

	c.Set("prepItem", prepItem)
	c.Set("prepItems", prepItems)
	c.Set("recipes", recipes)
	c.Set("inventoryItems", invItems)

	return c.Render(200, r.HTML("prep_items/edit"))
}

// Update changes a PrepItem in the DB. This function is mapped to
// the path PUT /prep_items/{prep_item_id}
func (v PrepItemsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PrepItem
	prepItem := &models.PrepItem{}

	if err := tx.Find(prepItem, c.Param("prep_item_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind PrepItem to the html form elements
	if err := c.Bind(prepItem); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(prepItem)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, prepItem))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "PrepItem was updated successfully")

	// and redirect to the prep_items index page
	return c.Render(200, r.Auto(c, prepItem))
}

func UpdatePrepItem(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	presenter := presentation.NewPresenter(tx)
	item, err := presenter.GetPrepItem(c.Param("prep_item_id"))
	if err != nil {
		return c.Error(404, err)
	}

	// Bind InventoryItem to the html form elements
	if err := c.Bind(item); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := presenter.UpdatePrepItem(item)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// TODO: send error to page
		return c.Render(422, r.String("failure"))
	}

	// and redirect to the inventory_items index page
	return c.Render(200, r.String("success"))
}

// Destroy deletes a PrepItem from the DB. This function is mapped
// to the path DELETE /prep_items/{prep_item_id}
func (v PrepItemsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PrepItem
	prepItem := &models.PrepItem{}

	// To find the PrepItem the parameter prep_item_id is used.
	if err := tx.Find(prepItem, c.Param("prep_item_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(prepItem); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "PrepItem was destroyed successfully")

	// Redirect to the prep_items index page
	return c.Render(200, r.Auto(c, prepItem))
}
