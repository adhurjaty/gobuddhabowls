package actions

import (
	"buddhabowls/models"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Vendor)
// DB Table: Plural (vendors)
// Resource: Plural (Vendors)
// Path: Plural (/vendors)
// View Template Folder: Plural (/templates/vendors/)

// VendorsResource is the resource for the Vendor model
type VendorsResource struct {
	buffalo.Resource
}

// List gets all Vendors. This function is mapped to the path
// GET /vendors
func (v VendorsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	vendors := &models.Vendors{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params()).Eager()

	// Retrieve all Vendors from the DB
	if err := q.All(vendors); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, vendors))
}

// Show gets the data for one Vendor. This function is mapped to
// the path GET /vendors/{vendor_id}
func (v VendorsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Vendor
	vendor := &models.Vendor{}

	// To find the Vendor the parameter vendor_id is used.
	if err := tx.Find(vendor, c.Param("vendor_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, vendor))
}

// New renders the form for creating a new Vendor.
// This function is mapped to the path GET /vendors/new
func (v VendorsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Vendor{}))
}

// Create adds a Vendor to the DB. This function is mapped to the
// path POST /vendors
func (v VendorsResource) Create(c buffalo.Context) error {
	// Allocate an empty Vendor
	vendor := &models.Vendor{}

	// Bind vendor to the html form elements
	if err := c.Bind(vendor); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(vendor)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, vendor))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Vendor was created successfully")

	// and redirect to the vendors index page
	return c.Render(201, r.Auto(c, vendor))
}

// Edit renders a edit form for a Vendor. This function is
// mapped to the path GET /vendors/{vendor_id}/edit
func (v VendorsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Vendor
	vendor := &models.Vendor{}

	if err := tx.Find(vendor, c.Param("vendor_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, vendor))
}

// Update changes a Vendor in the DB. This function is mapped to
// the path PUT /vendors/{vendor_id}
func (v VendorsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Vendor
	vendor := &models.Vendor{}

	if err := tx.Find(vendor, c.Param("vendor_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Vendor to the html form elements
	if err := c.Bind(vendor); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(vendor)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, vendor))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Vendor was updated successfully")

	// and redirect to the vendors index page
	return c.Render(200, r.Auto(c, vendor))
}

// Destroy deletes a Vendor from the DB. This function is mapped
// to the path DELETE /vendors/{vendor_id}
func (v VendorsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Vendor
	vendor := &models.Vendor{}

	// To find the Vendor the parameter vendor_id is used.
	if err := tx.Find(vendor, c.Param("vendor_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(vendor); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Vendor was destroyed successfully")

	// Redirect to the vendors index page
	return c.Render(200, r.Auto(c, vendor))
}
